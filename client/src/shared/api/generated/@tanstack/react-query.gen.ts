// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  authControllerSignIn,
  authControllerSignUp,
  authControllerRefresh,
  userControllerGetCategoryById,
  categoriesControllerGetCategories,
  categoriesControllerCreateCategory,
  categoriesControllerDeleteCategory,
  categoriesControllerGetCategoryById,
  categoriesControllerUpdateCategory,
  articlesControllerGetAticles,
  articlesControllerCreate,
  articlesControllerDeleteArticle,
  articlesControllerGetArticleById,
  articlesControllerUpdateViews,
  articlesControllerUpdateLikes,
  articlesControllerUpdateArticle,
  articlesControllerUploadFile,
  commentsControllerCreate,
  commentsControllerDelete,
  commentsControllerFindOne,
  commentsControllerUpdate,
  favoritesArticleControllerFindAll,
  favoritesArticleControllerCreate,
  favoritesArticleControllerDelete,
} from "../sdk.gen";
import { type UseMutationOptions, type DefaultError, queryOptions } from "@tanstack/react-query";
import type {
  AuthControllerSignInData,
  AuthControllerSignInResponse,
  AuthControllerSignUpData,
  AuthControllerSignUpResponse,
  AuthControllerRefreshData,
  AuthControllerRefreshResponse,
  UserControllerGetCategoryByIdData,
  CategoriesControllerGetCategoriesData,
  CategoriesControllerCreateCategoryData,
  CategoriesControllerCreateCategoryResponse,
  CategoriesControllerDeleteCategoryData,
  CategoriesControllerDeleteCategoryResponse,
  CategoriesControllerGetCategoryByIdData,
  CategoriesControllerUpdateCategoryData,
  CategoriesControllerUpdateCategoryResponse,
  ArticlesControllerGetAticlesData,
  ArticlesControllerCreateData,
  ArticlesControllerCreateResponse,
  ArticlesControllerDeleteArticleData,
  ArticlesControllerDeleteArticleResponse,
  ArticlesControllerGetArticleByIdData,
  ArticlesControllerUpdateViewsData,
  ArticlesControllerUpdateViewsResponse,
  ArticlesControllerUpdateLikesData,
  ArticlesControllerUpdateLikesResponse,
  ArticlesControllerUpdateArticleData,
  ArticlesControllerUpdateArticleResponse,
  ArticlesControllerUploadFileData,
  ArticlesControllerUploadFileResponse,
  CommentsControllerCreateData,
  CommentsControllerCreateResponse,
  CommentsControllerDeleteData,
  CommentsControllerDeleteResponse,
  CommentsControllerFindOneData,
  CommentsControllerUpdateData,
  CommentsControllerUpdateResponse,
  FavoritesArticleControllerFindAllData,
  FavoritesArticleControllerCreateData,
  FavoritesArticleControllerCreateResponse,
  FavoritesArticleControllerDeleteData,
  FavoritesArticleControllerDeleteResponse,
} from "../types.gen";
import { client } from "../client.gen";

export const authControllerSignInMutation = (
  options?: Partial<Options<AuthControllerSignInData>>,
): UseMutationOptions<
  AuthControllerSignInResponse,
  DefaultError,
  Options<AuthControllerSignInData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerSignInResponse,
    DefaultError,
    Options<AuthControllerSignInData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await authControllerSignIn({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authControllerSignUpMutation = (
  options?: Partial<Options<AuthControllerSignUpData>>,
): UseMutationOptions<
  AuthControllerSignUpResponse,
  DefaultError,
  Options<AuthControllerSignUpData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerSignUpResponse,
    DefaultError,
    Options<AuthControllerSignUpData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await authControllerSignUp({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authControllerRefreshMutation = (
  options?: Partial<Options<AuthControllerRefreshData>>,
): UseMutationOptions<
  AuthControllerRefreshResponse,
  DefaultError,
  Options<AuthControllerRefreshData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerRefreshResponse,
    DefaultError,
    Options<AuthControllerRefreshData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await authControllerRefresh({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const userControllerGetCategoryByIdQueryKey = (
  options: Options<UserControllerGetCategoryByIdData>,
) => createQueryKey("userControllerGetCategoryById", options);

export const userControllerGetCategoryByIdOptions = (
  options: Options<UserControllerGetCategoryByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerGetCategoryById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerGetCategoryByIdQueryKey(options),
  });
};

export const categoriesControllerGetCategoriesQueryKey = (
  options?: Options<CategoriesControllerGetCategoriesData>,
) => createQueryKey("categoriesControllerGetCategories", options);

export const categoriesControllerGetCategoriesOptions = (
  options?: Options<CategoriesControllerGetCategoriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await categoriesControllerGetCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: categoriesControllerGetCategoriesQueryKey(options),
  });
};

export const categoriesControllerCreateCategoryMutation = (
  options?: Partial<Options<CategoriesControllerCreateCategoryData>>,
): UseMutationOptions<
  CategoriesControllerCreateCategoryResponse,
  DefaultError,
  Options<CategoriesControllerCreateCategoryData>
> => {
  const mutationOptions: UseMutationOptions<
    CategoriesControllerCreateCategoryResponse,
    DefaultError,
    Options<CategoriesControllerCreateCategoryData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await categoriesControllerCreateCategory({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const categoriesControllerDeleteCategoryMutation = (
  options?: Partial<Options<CategoriesControllerDeleteCategoryData>>,
): UseMutationOptions<
  CategoriesControllerDeleteCategoryResponse,
  DefaultError,
  Options<CategoriesControllerDeleteCategoryData>
> => {
  const mutationOptions: UseMutationOptions<
    CategoriesControllerDeleteCategoryResponse,
    DefaultError,
    Options<CategoriesControllerDeleteCategoryData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await categoriesControllerDeleteCategory({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const categoriesControllerGetCategoryByIdQueryKey = (
  options: Options<CategoriesControllerGetCategoryByIdData>,
) => createQueryKey("categoriesControllerGetCategoryById", options);

export const categoriesControllerGetCategoryByIdOptions = (
  options: Options<CategoriesControllerGetCategoryByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await categoriesControllerGetCategoryById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: categoriesControllerGetCategoryByIdQueryKey(options),
  });
};

export const categoriesControllerUpdateCategoryMutation = (
  options?: Partial<Options<CategoriesControllerUpdateCategoryData>>,
): UseMutationOptions<
  CategoriesControllerUpdateCategoryResponse,
  DefaultError,
  Options<CategoriesControllerUpdateCategoryData>
> => {
  const mutationOptions: UseMutationOptions<
    CategoriesControllerUpdateCategoryResponse,
    DefaultError,
    Options<CategoriesControllerUpdateCategoryData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await categoriesControllerUpdateCategory({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerGetAticlesQueryKey = (
  options?: Options<ArticlesControllerGetAticlesData>,
) => createQueryKey("articlesControllerGetAticles", options);

export const articlesControllerGetAticlesOptions = (
  options?: Options<ArticlesControllerGetAticlesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await articlesControllerGetAticles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: articlesControllerGetAticlesQueryKey(options),
  });
};

export const articlesControllerCreateMutation = (
  options?: Partial<Options<ArticlesControllerCreateData>>,
): UseMutationOptions<
  ArticlesControllerCreateResponse,
  DefaultError,
  Options<ArticlesControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerCreateResponse,
    DefaultError,
    Options<ArticlesControllerCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerDeleteArticleMutation = (
  options?: Partial<Options<ArticlesControllerDeleteArticleData>>,
): UseMutationOptions<
  ArticlesControllerDeleteArticleResponse,
  DefaultError,
  Options<ArticlesControllerDeleteArticleData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerDeleteArticleResponse,
    DefaultError,
    Options<ArticlesControllerDeleteArticleData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerDeleteArticle({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerGetArticleByIdQueryKey = (
  options: Options<ArticlesControllerGetArticleByIdData>,
) => createQueryKey("articlesControllerGetArticleById", options);

export const articlesControllerGetArticleByIdOptions = (
  options: Options<ArticlesControllerGetArticleByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await articlesControllerGetArticleById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: articlesControllerGetArticleByIdQueryKey(options),
  });
};

export const articlesControllerUpdateViewsMutation = (
  options?: Partial<Options<ArticlesControllerUpdateViewsData>>,
): UseMutationOptions<
  ArticlesControllerUpdateViewsResponse,
  DefaultError,
  Options<ArticlesControllerUpdateViewsData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerUpdateViewsResponse,
    DefaultError,
    Options<ArticlesControllerUpdateViewsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerUpdateViews({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerUpdateLikesMutation = (
  options?: Partial<Options<ArticlesControllerUpdateLikesData>>,
): UseMutationOptions<
  ArticlesControllerUpdateLikesResponse,
  DefaultError,
  Options<ArticlesControllerUpdateLikesData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerUpdateLikesResponse,
    DefaultError,
    Options<ArticlesControllerUpdateLikesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerUpdateLikes({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerUpdateArticleMutation = (
  options?: Partial<Options<ArticlesControllerUpdateArticleData>>,
): UseMutationOptions<
  ArticlesControllerUpdateArticleResponse,
  DefaultError,
  Options<ArticlesControllerUpdateArticleData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerUpdateArticleResponse,
    DefaultError,
    Options<ArticlesControllerUpdateArticleData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerUpdateArticle({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const articlesControllerUploadFileMutation = (
  options?: Partial<Options<ArticlesControllerUploadFileData>>,
): UseMutationOptions<
  ArticlesControllerUploadFileResponse,
  DefaultError,
  Options<ArticlesControllerUploadFileData>
> => {
  const mutationOptions: UseMutationOptions<
    ArticlesControllerUploadFileResponse,
    DefaultError,
    Options<ArticlesControllerUploadFileData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await articlesControllerUploadFile({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const commentsControllerCreateMutation = (
  options?: Partial<Options<CommentsControllerCreateData>>,
): UseMutationOptions<
  CommentsControllerCreateResponse,
  DefaultError,
  Options<CommentsControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    CommentsControllerCreateResponse,
    DefaultError,
    Options<CommentsControllerCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await commentsControllerCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const commentsControllerDeleteMutation = (
  options?: Partial<Options<CommentsControllerDeleteData>>,
): UseMutationOptions<
  CommentsControllerDeleteResponse,
  DefaultError,
  Options<CommentsControllerDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    CommentsControllerDeleteResponse,
    DefaultError,
    Options<CommentsControllerDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await commentsControllerDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const commentsControllerFindOneQueryKey = (
  options: Options<CommentsControllerFindOneData>,
) => createQueryKey("commentsControllerFindOne", options);

export const commentsControllerFindOneOptions = (
  options: Options<CommentsControllerFindOneData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await commentsControllerFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: commentsControllerFindOneQueryKey(options),
  });
};

export const commentsControllerUpdateMutation = (
  options?: Partial<Options<CommentsControllerUpdateData>>,
): UseMutationOptions<
  CommentsControllerUpdateResponse,
  DefaultError,
  Options<CommentsControllerUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    CommentsControllerUpdateResponse,
    DefaultError,
    Options<CommentsControllerUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await commentsControllerUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const favoritesArticleControllerFindAllQueryKey = (
  options: Options<FavoritesArticleControllerFindAllData>,
) => createQueryKey("favoritesArticleControllerFindAll", options);

export const favoritesArticleControllerFindAllOptions = (
  options: Options<FavoritesArticleControllerFindAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await favoritesArticleControllerFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: favoritesArticleControllerFindAllQueryKey(options),
  });
};

export const favoritesArticleControllerCreateMutation = (
  options?: Partial<Options<FavoritesArticleControllerCreateData>>,
): UseMutationOptions<
  FavoritesArticleControllerCreateResponse,
  DefaultError,
  Options<FavoritesArticleControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    FavoritesArticleControllerCreateResponse,
    DefaultError,
    Options<FavoritesArticleControllerCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await favoritesArticleControllerCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const favoritesArticleControllerDeleteMutation = (
  options?: Partial<Options<FavoritesArticleControllerDeleteData>>,
): UseMutationOptions<
  FavoritesArticleControllerDeleteResponse,
  DefaultError,
  Options<FavoritesArticleControllerDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    FavoritesArticleControllerDeleteResponse,
    DefaultError,
    Options<FavoritesArticleControllerDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await favoritesArticleControllerDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
