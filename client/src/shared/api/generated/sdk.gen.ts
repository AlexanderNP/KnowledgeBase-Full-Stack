// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from "./client";
import type {
  AuthControllerSignInData,
  AuthControllerSignInResponses,
  AuthControllerSignUpData,
  AuthControllerSignUpResponses,
  AuthControllerRefreshData,
  AuthControllerRefreshResponses,
  UserControllerGetCategoryByIdData,
  UserControllerGetCategoryByIdResponses,
  CategoriesControllerGetCategoriesData,
  CategoriesControllerGetCategoriesResponses,
  CategoriesControllerCreateCategoryData,
  CategoriesControllerCreateCategoryResponses,
  CategoriesControllerDeleteCategoryData,
  CategoriesControllerDeleteCategoryResponses,
  CategoriesControllerGetCategoryByIdData,
  CategoriesControllerGetCategoryByIdResponses,
  CategoriesControllerUpdateCategoryData,
  CategoriesControllerUpdateCategoryResponses,
  ArticlesControllerGetAticlesData,
  ArticlesControllerGetAticlesResponses,
  ArticlesControllerCreateData,
  ArticlesControllerCreateResponses,
  ArticlesControllerDeleteArticleData,
  ArticlesControllerDeleteArticleResponses,
  ArticlesControllerGetArticleByIdData,
  ArticlesControllerGetArticleByIdResponses,
  ArticlesControllerUpdateViewsData,
  ArticlesControllerUpdateViewsResponses,
  ArticlesControllerUpdateLikesData,
  ArticlesControllerUpdateLikesResponses,
  ArticlesControllerUpdateArticleData,
  ArticlesControllerUpdateArticleResponses,
  ArticlesControllerUploadFileData,
  ArticlesControllerUploadFileResponses,
  CommentsControllerCreateData,
  CommentsControllerCreateResponses,
  CommentsControllerDeleteData,
  CommentsControllerDeleteResponses,
  CommentsControllerFindOneData,
  CommentsControllerFindOneResponses,
  CommentsControllerUpdateData,
  CommentsControllerUpdateResponses,
  FavoritesArticleControllerFindAllData,
  FavoritesArticleControllerFindAllResponses,
  FavoritesArticleControllerCreateData,
  FavoritesArticleControllerCreateResponses,
  FavoritesArticleControllerDeleteData,
  FavoritesArticleControllerDeleteResponses,
} from "./types.gen";
import { client } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const authControllerSignIn = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignInData, ThrowOnError>,
) => {
  return (options.client ?? client).post<AuthControllerSignInResponses, unknown, ThrowOnError>({
    url: "/auth/signIn",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const authControllerSignUp = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignUpData, ThrowOnError>,
) => {
  return (options.client ?? client).post<AuthControllerSignUpResponses, unknown, ThrowOnError>({
    url: "/auth/signUp",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const authControllerRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AuthControllerRefreshResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "refreshToken",
        type: "apiKey",
      },
    ],
    url: "/auth/refresh",
    ...options,
  });
};

export const userControllerGetCategoryById = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerGetCategoryByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    UserControllerGetCategoryByIdResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/{id}",
    ...options,
  });
};

export const categoriesControllerGetCategories = <ThrowOnError extends boolean = false>(
  options?: Options<CategoriesControllerGetCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CategoriesControllerGetCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/categories",
    ...options,
  });
};

export const categoriesControllerCreateCategory = <ThrowOnError extends boolean = false>(
  options: Options<CategoriesControllerCreateCategoryData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CategoriesControllerCreateCategoryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/categories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const categoriesControllerDeleteCategory = <ThrowOnError extends boolean = false>(
  options: Options<CategoriesControllerDeleteCategoryData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    CategoriesControllerDeleteCategoryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/categories/{id}",
    ...options,
  });
};

export const categoriesControllerGetCategoryById = <ThrowOnError extends boolean = false>(
  options: Options<CategoriesControllerGetCategoryByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    CategoriesControllerGetCategoryByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/categories/{id}",
    ...options,
  });
};

export const categoriesControllerUpdateCategory = <ThrowOnError extends boolean = false>(
  options: Options<CategoriesControllerUpdateCategoryData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    CategoriesControllerUpdateCategoryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/categories/update/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const articlesControllerGetAticles = <ThrowOnError extends boolean = false>(
  options?: Options<ArticlesControllerGetAticlesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ArticlesControllerGetAticlesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/articles",
    ...options,
  });
};

export const articlesControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<ArticlesControllerCreateResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/articles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const articlesControllerDeleteArticle = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerDeleteArticleData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    ArticlesControllerDeleteArticleResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/articles/{id}",
    ...options,
  });
};

export const articlesControllerGetArticleById = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerGetArticleByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    ArticlesControllerGetArticleByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/articles/{id}",
    ...options,
  });
};

export const articlesControllerUpdateViews = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerUpdateViewsData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    ArticlesControllerUpdateViewsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/articles/views/{id}",
    ...options,
  });
};

export const articlesControllerUpdateLikes = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerUpdateLikesData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    ArticlesControllerUpdateLikesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/articles/likes/{id}",
    ...options,
  });
};

export const articlesControllerUpdateArticle = <ThrowOnError extends boolean = false>(
  options: Options<ArticlesControllerUpdateArticleData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    ArticlesControllerUpdateArticleResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/articles/update/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const articlesControllerUploadFile = <ThrowOnError extends boolean = false>(
  options?: Options<ArticlesControllerUploadFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ArticlesControllerUploadFileResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/articles/file/upload",
    ...options,
  });
};

export const commentsControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<CommentsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<CommentsControllerCreateResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/comments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const commentsControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<CommentsControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    CommentsControllerDeleteResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/comments/{id}",
    ...options,
  });
};

export const commentsControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<CommentsControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? client).get<CommentsControllerFindOneResponses, unknown, ThrowOnError>({
    url: "/comments/{id}",
    ...options,
  });
};

export const commentsControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CommentsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).put<CommentsControllerUpdateResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/comments/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const favoritesArticleControllerFindAll = <ThrowOnError extends boolean = false>(
  options: Options<FavoritesArticleControllerFindAllData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    FavoritesArticleControllerFindAllResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/favorites-article",
    ...options,
  });
};

export const favoritesArticleControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<FavoritesArticleControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    FavoritesArticleControllerCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/favorites-article",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const favoritesArticleControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<FavoritesArticleControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    FavoritesArticleControllerDeleteResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/favorites-article/{id}",
    ...options,
  });
};
