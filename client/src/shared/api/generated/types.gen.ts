// This file is auto-generated by @hey-api/openapi-ts

export type LoginUserDto = {
  /**
   * Email пользователя
   */
  email: string;
  /**
   * Пароль пользователя
   */
  password: string;
};

export type AuthUser = {
  id: string;
  createdAt: string;
  updateAt: string;
  username: string;
  email: string;
  accessToken: string;
  refreshToken: string;
};

export type CreateUserDto = {
  /**
   * Имя пользователя
   */
  username: string;
  /**
   * Email пользователя
   */
  email: string;
  /**
   * Пароль пользователя
   */
  password: string;
};

export type Tokens = {
  accessToken: string;
  refreshToken: string;
};

export type FavoritesArticle = {
  id: string;
  articleId: string;
  userId: string;
  savedAt: string;
};

export type Role = "USER" | "ADMIN";

export type User = {
  favoritesArticle?: Array<FavoritesArticle>;
  role: Role;
  id: string;
  email: string;
  username: string;
};

export type CreateCategoryDto = {
  /**
   * Название категории
   */
  name: string;
  /**
   * Описание категории
   */
  description: string;
};

export type Category = {
  description: string;
  name: string;
  id: string;
  imageUrl: string | null;
  articleIds: Array<string>;
  createdAt: string;
  updateAt: string;
};

export type CategoryById = {
  description: string;
  name: string;
  id: string;
  imageUrl: string | null;
  articleIds: Array<string>;
  createdAt: string;
  updateAt: string;
  articles: Array<{
    id: string;
    title: string;
    viewCount: number;
    likesCount: number;
    createdAt: string;
    mediaFiles?: Array<{
      url: string;
    }>;
    comments?: Array<{
      id: string;
    }>;
  }>;
};

export type UpdateCategoryDto = {
  /**
   * Название категории
   */
  name?: string;
  /**
   * Описание категории
   */
  description?: string;
};

export type CreateMediaFilesDto = {
  /**
   * URL медиафайла
   */
  url: string;
  /**
   * Тип файла
   */
  type: "DOCUMENT" | "IMG";
};

export type CreateArticleDto = {
  /**
   * Заголовок статьи
   */
  title: string;
  /**
   * Содержание статьи
   */
  content: string;
  /**
   * ID автора статьи (MongoDB ObjectId)
   */
  authorId: string;
  /**
   * Медиафайлы, прикрепленные к статье
   */
  mediaFiles?: Array<CreateMediaFilesDto>;
  /**
   * Массив ID категорий (MongoDB ObjectId)
   */
  categoryIds: Array<string>;
};

export type Article = {
  id: string;
  title: string;
  content: string;
  viewCount: number;
  likesCount: number;
  authorId: string;
  categoryIds: Array<string>;
  createdAt: string;
  updateAt: string;
};

export type UpdateArticleDto = {
  /**
   * Заголовок статьи
   */
  title?: string;
  /**
   * Содержание статьи
   */
  content?: string;
  /**
   * Медиафайлы, прикрепленные к статье
   */
  mediaFiles?: Array<CreateMediaFilesDto>;
  /**
   * Массив ID категорий (MongoDB ObjectId)
   */
  categoryIds?: Array<string>;
};

export type CreateCommentDto = {
  /**
   * Текст комментария
   */
  content: string;
  /**
   * ID автора комментария (MongoDB ObjectId)
   */
  userId: string;
  /**
   * ID статьи (MongoDB ObjectId)
   */
  articleId: string;
};

export type Comment = {
  id: string;
  createdAt: string;
  updateAt: string;
  content: string;
  userId: string;
  articleId: string;
};

export type UpdateCommentDto = {
  /**
   * Обновленный текст комментария
   */
  content?: string;
  /**
   * ID автора комментария (MongoDB ObjectId)
   */
  userId?: string;
  /**
   * ID статьи (MongoDB ObjectId)
   */
  articleId?: string;
};

export type CreateFavoritesArticleDto = {
  /**
   * ID статьи, которую добавляют в избранное
   */
  articleId: string;
  /**
   * ID пользователя, который добавляет статью в избранное
   */
  userId: string;
};

export type AuthControllerSignInData = {
  body: LoginUserDto;
  path?: never;
  query?: never;
  url: "/auth/signIn";
};

export type AuthControllerSignInResponses = {
  201: AuthUser;
};

export type AuthControllerSignInResponse =
  AuthControllerSignInResponses[keyof AuthControllerSignInResponses];

export type AuthControllerSignUpData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: "/auth/signUp";
};

export type AuthControllerSignUpResponses = {
  201: {
    [key: string]: unknown;
  };
};

export type AuthControllerSignUpResponse =
  AuthControllerSignUpResponses[keyof AuthControllerSignUpResponses];

export type AuthControllerRefreshData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh";
};

export type AuthControllerRefreshResponses = {
  201: Tokens;
};

export type AuthControllerRefreshResponse =
  AuthControllerRefreshResponses[keyof AuthControllerRefreshResponses];

export type UserControllerGetCategoryByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/user/{id}";
};

export type UserControllerGetCategoryByIdResponses = {
  200: User;
};

export type UserControllerGetCategoryByIdResponse =
  UserControllerGetCategoryByIdResponses[keyof UserControllerGetCategoryByIdResponses];

export type CategoriesControllerGetCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/categories";
};

export type CategoriesControllerGetCategoriesResponses = {
  200: Array<Category>;
};

export type CategoriesControllerGetCategoriesResponse =
  CategoriesControllerGetCategoriesResponses[keyof CategoriesControllerGetCategoriesResponses];

export type CategoriesControllerCreateCategoryData = {
  body: CreateCategoryDto;
  path?: never;
  query?: never;
  url: "/categories";
};

export type CategoriesControllerCreateCategoryResponses = {
  201: Category;
};

export type CategoriesControllerCreateCategoryResponse =
  CategoriesControllerCreateCategoryResponses[keyof CategoriesControllerCreateCategoryResponses];

export type CategoriesControllerDeleteCategoryData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/categories/{id}";
};

export type CategoriesControllerDeleteCategoryResponses = {
  200: Category;
};

export type CategoriesControllerDeleteCategoryResponse =
  CategoriesControllerDeleteCategoryResponses[keyof CategoriesControllerDeleteCategoryResponses];

export type CategoriesControllerGetCategoryByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/categories/{id}";
};

export type CategoriesControllerGetCategoryByIdResponses = {
  200: CategoryById;
};

export type CategoriesControllerGetCategoryByIdResponse =
  CategoriesControllerGetCategoryByIdResponses[keyof CategoriesControllerGetCategoryByIdResponses];

export type CategoriesControllerUpdateCategoryData = {
  body: UpdateCategoryDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/categories/update/{id}";
};

export type CategoriesControllerUpdateCategoryResponses = {
  200: Category;
};

export type CategoriesControllerUpdateCategoryResponse =
  CategoriesControllerUpdateCategoryResponses[keyof CategoriesControllerUpdateCategoryResponses];

export type ArticlesControllerGetAticlesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/articles";
};

export type ArticlesControllerGetAticlesResponses = {
  200: Array<Article>;
};

export type ArticlesControllerGetAticlesResponse =
  ArticlesControllerGetAticlesResponses[keyof ArticlesControllerGetAticlesResponses];

export type ArticlesControllerCreateData = {
  body: CreateArticleDto;
  path?: never;
  query?: never;
  url: "/articles";
};

export type ArticlesControllerCreateResponses = {
  201: Article;
};

export type ArticlesControllerCreateResponse =
  ArticlesControllerCreateResponses[keyof ArticlesControllerCreateResponses];

export type ArticlesControllerDeleteArticleData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/{id}";
};

export type ArticlesControllerDeleteArticleResponses = {
  200: Article;
};

export type ArticlesControllerDeleteArticleResponse =
  ArticlesControllerDeleteArticleResponses[keyof ArticlesControllerDeleteArticleResponses];

export type ArticlesControllerGetArticleByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/{id}";
};

export type ArticlesControllerGetArticleByIdResponses = {
  200: Article;
};

export type ArticlesControllerGetArticleByIdResponse =
  ArticlesControllerGetArticleByIdResponses[keyof ArticlesControllerGetArticleByIdResponses];

export type ArticlesControllerUpdateViewsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/views/{id}";
};

export type ArticlesControllerUpdateViewsResponses = {
  200: Article;
};

export type ArticlesControllerUpdateViewsResponse =
  ArticlesControllerUpdateViewsResponses[keyof ArticlesControllerUpdateViewsResponses];

export type ArticlesControllerUpdateLikesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/likes/{id}";
};

export type ArticlesControllerUpdateLikesResponses = {
  200: Article;
};

export type ArticlesControllerUpdateLikesResponse =
  ArticlesControllerUpdateLikesResponses[keyof ArticlesControllerUpdateLikesResponses];

export type ArticlesControllerUpdateArticleData = {
  body: UpdateArticleDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/update/{id}";
};

export type ArticlesControllerUpdateArticleResponses = {
  200: Article;
};

export type ArticlesControllerUpdateArticleResponse =
  ArticlesControllerUpdateArticleResponses[keyof ArticlesControllerUpdateArticleResponses];

export type ArticlesControllerUploadFileData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/articles/file/upload";
};

export type ArticlesControllerUploadFileResponses = {
  201: string;
};

export type ArticlesControllerUploadFileResponse =
  ArticlesControllerUploadFileResponses[keyof ArticlesControllerUploadFileResponses];

export type CommentsControllerCreateData = {
  body: CreateCommentDto;
  path?: never;
  query?: never;
  url: "/comments";
};

export type CommentsControllerCreateResponses = {
  201: Comment;
};

export type CommentsControllerCreateResponse =
  CommentsControllerCreateResponses[keyof CommentsControllerCreateResponses];

export type CommentsControllerDeleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/comments/{id}";
};

export type CommentsControllerDeleteResponses = {
  200: Comment;
};

export type CommentsControllerDeleteResponse =
  CommentsControllerDeleteResponses[keyof CommentsControllerDeleteResponses];

export type CommentsControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/comments/{id}";
};

export type CommentsControllerFindOneResponses = {
  200: Comment;
};

export type CommentsControllerFindOneResponse =
  CommentsControllerFindOneResponses[keyof CommentsControllerFindOneResponses];

export type CommentsControllerUpdateData = {
  body: UpdateCommentDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/comments/{id}";
};

export type CommentsControllerUpdateResponses = {
  200: Comment;
};

export type CommentsControllerUpdateResponse =
  CommentsControllerUpdateResponses[keyof CommentsControllerUpdateResponses];

export type FavoritesArticleControllerFindAllData = {
  body?: never;
  path?: never;
  query: {
    userId: string;
  };
  url: "/favorites-article";
};

export type FavoritesArticleControllerFindAllResponses = {
  200: Array<FavoritesArticle>;
};

export type FavoritesArticleControllerFindAllResponse =
  FavoritesArticleControllerFindAllResponses[keyof FavoritesArticleControllerFindAllResponses];

export type FavoritesArticleControllerCreateData = {
  body: CreateFavoritesArticleDto;
  path?: never;
  query?: never;
  url: "/favorites-article";
};

export type FavoritesArticleControllerCreateResponses = {
  201: FavoritesArticle;
};

export type FavoritesArticleControllerCreateResponse =
  FavoritesArticleControllerCreateResponses[keyof FavoritesArticleControllerCreateResponses];

export type FavoritesArticleControllerDeleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/favorites-article/{id}";
};

export type FavoritesArticleControllerDeleteResponses = {
  200: FavoritesArticle;
};

export type FavoritesArticleControllerDeleteResponse =
  FavoritesArticleControllerDeleteResponses[keyof FavoritesArticleControllerDeleteResponses];

export type ClientOptions = {
  baseUrl: string;
};
