// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Articles {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  viewCount   Int          @default(0)
  likesCount  Int          @default(0)
  authorId    String       @db.ObjectId
  categoryIds String[]     @db.ObjectId
  categories  Categories[] @relation(fields: [categoryIds], references: [id])
  comments    Comments[]
  mediaFiles  MediaFiles[]
  createdAt   DateTime     @default(now())
  updateAt    DateTime     @updatedAt
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  articleId String   @db.ObjectId
  article   Articles @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model MediaFiles {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  type      FileTypes @default(IMG)
  articleId String    @db.ObjectId
  article   Articles  @relation(fields: [articleId], references: [id])
}

model Categories {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String
  imageUrl    String?
  articleIds  String[]   @db.ObjectId
  articles    Articles[] @relation(fields: [articleIds], references: [id])
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  email            String             @unique
  password         String
  role             Role               @default(USER)
  favoritesArticle FavoritesArticle[]
  refreshTokens    RefreshTokens[]
  createdAt        DateTime           @default(now())
  updateAt         DateTime           @updatedAt
}

model RefreshTokens {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  validUntil DateTime
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model FavoritesArticle {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  savedAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum FileTypes {
  DOCUMENT
  IMG
}
